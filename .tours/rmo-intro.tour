{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "RMO Intro",
  "steps": [
    {
      "title": "Introduction",
      "description": "Welcome to the CodeTour into Route Monitor Operator (RMO). Have fun exploring this code base!"
    },
    {
      "file": "main.go",
      "description": "RMO uses Operator SDK v1.0+. This line in main.go is where the control loop is started for the watched objects: RouteMonitors & ClusterUrlMonitors.",
      "line": 106
    },
    {
      "file": "main.go",
      "description": "RouteMonitors use the RouteMonitor controller, which uses these internal structures to operate on. They are initialized once for the runtime of the application.",
      "line": 90
    },
    {
      "file": "main.go",
      "description": "Here the ClusterURL is initialized.",
      "line": 97
    },
    {
      "file": "controllers/routemonitor/routemonitor.go",
      "description": "This is the entrypoint to Reconciling RouteMonitor resources. A RouteMonitor is used to specify an OpenShift route that will be observed by synthetic probes.\nThe `Reconcile` function will be called each time a RouteMonitor is created or updated.",
      "line": 75
    },
    {
      "file": "controllers/routemonitor/routemonitor.go",
      "description": "the `Reconcile` function is split into idempotent subroutines which are executed for each run. This specific step makes sure the BlackBoxExporter, which is used for the synthetic probing, is deployed (i.e. the `Deployment` is created)",
      "line": 112
    },
    {
      "file": "controllers/routemonitor/routemonitor.go",
      "description": "The implementation of all steps related to reconciling the RouteMonitors is split into Handlers that manage the creation of subresources.",
      "line": 54
    },
    {
      "file": "controllers/routemonitor/routemonitor.go",
      "description": "`BlackBoxExporter` contains everything related to manage the BlackBox exporter deployment, that needs to be set up according the configuration of the RouteMonitor.",
      "line": 59
    },
    {
      "file": "controllers/routemonitor/routemonitor.go",
      "description": "`ServiceMonitor` contains everything to create and update a ServiceMonitor CR. One ServiceMonitor needs to be created for each RouteMonitor.",
      "line": 60
    },
    {
      "file": "controllers/routemonitor/routemonitor.go",
      "description": "`Prom` contains the functionality for creating a PrometheusRules that will trigger the alert in case the SLO configured in the RouteMonitor can not be fulfilled.",
      "line": 61
    },
    {
      "file": "controllers/clusterurlmonitor/clusterurlmonitor.go",
      "description": "For the ClusterURLMonitor the functionality is split into the same sub-modules.",
      "line": 58
    },
    {
      "file": "controllers/clusterurlmonitor/clusterurlmonitor_supplement.go",
      "description": "Here are some of the functions defined that are used in the reconcile loop.",
      "line": 18
    },
    {
      "file": "pkg/servicemonitor/servicemonitor.go",
      "description": "functionality that is common between the RouteMonitor and ClusterUrlMonitor processing is located in the pkg folder. This file contains for example contains the templates for the ServiceMonitors that are created.",
      "line": 84
    },
    {
      "file": "pkg/alert/prometheusrule.go",
      "description": "functionality that is common between the RouteMonitor and ClusterUrlMonitor processing is located in the pkg folder. This file contains for example contains the templates for the PrometheusRules that are created.",
      "line": 142
    },
    {
      "file": "pkg/blackboxexporter/blackboxexporter.go",
      "description": "A BlackBoxExporter is deployed as soon as at least one resource is observed by the operator. It's used to probe the specified URLs.",
      "line": 66
    },
    {
      "file": "controllers/clusterurlmonitor/clusterurlmonitor_test.go",
      "description": "We use Ginkgo and Gomega for our test suite.",
      "line": 77
    },
    {
      "file": "int/int_test.go",
      "description": "In addition to unit tests we have a suite of integration tests that can be run with `make test-integration`. You can also execute the against an OpenShift cluster you're currently logged in with `go test ./int`.\nThese tests create resources in the cluster and observe if the outcome matches the expected outcome. This test for example creates a ClusterUrlMonitor and expects a ServiceMonitor to show up.",
      "line": 69
    }
  ]
}